# This starter workflow is for a CMake project running on multiple platforms. 
# There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run program and compare output
      run: |
        # Change into your build directory
        cd ${{ steps.strings.outputs.build-output-dir }}

        echo "Running program..."
        # On Windows, your exe is typically under .\Release\ if using Visual Studio generators
        # On Linux, your binary is typically right in the build folder (or subfolder) 
        if [ "${{ runner.os }}" = "Windows" ]; then
          .\\${{ matrix.build_type }}\\my_program.exe > program_output.log
        else
          ./my_program > program_output.log
        fi

        echo "----- Program Output -----"
        cat program_output.log
        echo "--------------------------"

        echo "Comparing output with expected lines..."

        # Example line-by-line comparisons:
        grep -q "Memory Stress Test" program_output.log || (echo "Missing 'Memory Stress Test'" && exit 1)
        grep -q "Buffer size    : 536870912 bytes" program_output.log || (echo "Buffer size line mismatch" && exit 1)
        grep -q "Iterations     : 10" program_output.log || (echo "Iterations line mismatch" && exit 1)
        grep -q "Threads        : 8" program_output.log || (echo "Threads line mismatch" && exit 1)
        grep -q "Access pattern : Sequential" program_output.log || (echo "Access pattern line mismatch" && exit 1)
        grep -q "Total bytes processed : 10737418240.00 bytes" program_output.log || (echo "Total bytes processed mismatch" && exit 1)
        # Numeric values (elapsed time, throughput) may vary from run to run. 
        # If you have a tolerance, parse the numbers more carefully or do a partial string check:
        grep -q "Elapsed time          :" program_output.log || (echo "Missing 'Elapsed time' line" && exit 1)
        grep -q "Throughput            :" program_output.log || (echo "Missing 'Throughput' line" && exit 1)

        echo "Output successfully matched expected reference!"
